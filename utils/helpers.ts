// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
export const getDifficultyColor = (difficulty: string): string => {
  switch (difficulty) {
    case '–ù–∞—á–∏–Ω–∞—é—â–∏–π':
      return '#10b981';
    case '–°—Ä–µ–¥–Ω–∏–π':
      return '#f59e0b';
    case '–°–ª–æ–∂–Ω—ã–π':
      return '#ef4444';
    default:
      return '#6b7280';
  }
};

// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export const calculateProgress = (completed: number, total: number): number => {
  if (total === 0) return 0;
  return Math.round((completed / total) * 100);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∫–æ–≤
export const formatPoints = (points: number): string => {
  if (points >= 1000) {
    return `${(points / 1000).toFixed(1)}k`;
  }
  return points.toString();
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
export const getUserLevel = (points: number): string => {
  if (points < 500) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
  if (points < 1500) return '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É—é—â–∏–π';
  if (points < 3000) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  if (points < 5000) return '–≠–∫—Å–ø–µ—Ä—Ç';
  return '–ú–∞—Å—Ç–µ—Ä';
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
export const generateId = (): string => {
  return Math.random().toString(36).substr(2, 9);
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
export const getQuizMessage = (percentage: number): string => {
  if (percentage >= 90) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üéâ';
  if (percentage >= 70) return '–û—Ç–ª–∏—á–Ω–æ! üëè';
  if (percentage >= 50) return '–•–æ—Ä–æ—à–æ! üëç';
  if (percentage >= 30) return '–ù–µ–ø–ª–æ—Ö–æ! üí™';
  return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üìö';
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
export const timeAgo = (dateString: string): string => {
  const now = new Date();
  const date = new Date(dateString);
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} —á. –Ω–∞–∑–∞–¥`;
  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} –¥–Ω. –Ω–∞–∑–∞–¥`;
  
  return formatDate(dateString);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
export const getRandomElement = <T>(array: T[]): T => {
  return array[Math.floor(Math.random() * array.length)];
};

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
export const shuffleArray = <T>(array: T[]): T[] => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}; 